<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
">


    <!--    扫描组件            -->
    <context:component-scan base-package="com.syning.mvc"></context:component-scan>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


    <!--    视图控制器，替代一个只返回视图名称的控制器方法-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>



    <!--    开启mvc的注解驱动      -->
    <mvc:annotation-driven />


    <!--        开放对静态资源的访问，如果当前 DispatcherServlet 处理不了，就会交给 DefaultServlet 处理，注意要和上面的注解驱动配合使用             -->
<!--    <mvc:default-servlet-handler/>-->



    <!--      配置文件上传解析器，将上传的文件封装为 MultipartFile 对象    -->
<!--    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>-->


<!--      配置拦截器         -->
    <mvc:interceptors>
<!--      bean 标签和 ref 标签效果一样，不过 ref 需要先将实现类扫描为普通组件，这两种方式默认对所有请求进行拦截      -->
<!--        <bean class="com.syning.mvc.interceptors.FirstInterceptor"></bean>-->
<!--        <ref bean="firstInterceptor"></ref>-->

<!--        <mvc:interceptor>-->
<!--            <mvc:mapping path="/**"/>         &lt;!&ndash; 指定请求映射  /* 表示一层目录-->
<!--                                              若是要拦截多层目录使用  /**   所以在拦截器中，使用 /** 匹配所有请求映射  &ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/"/>   &lt;!&ndash; 排除请求映射  &ndash;&gt;-->
<!--            <ref bean="firstInterceptor"/>-->
<!--        </mvc:interceptor>-->


        <ref bean="firstInterceptor"></ref>

        <ref bean="secondInterceptor"></ref>
    </mvc:interceptors>



<!--    配置异常处理              -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
<!--                properties 的键表示处理器方法执行过程中出现的异常
                    properties 的值表示若出现指定异常，设置一个新的视图名称，跳转到指定页面           -->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
<!--        将异常信息保存到 request 域中，以 ex 为 key          -->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>



</beans>